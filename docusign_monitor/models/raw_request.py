# coding: utf-8

"""
    DocuSign Monitor API - v2

    An API for an integrator to access the features of DocuSign Monitor  # noqa: E501

    OpenAPI spec version: v2.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RawRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_scope': 'str',
        'query_scope_id': 'str',
        'query': 'str'
    }

    attribute_map = {
        'query_scope': 'queryScope',
        'query_scope_id': 'queryScopeId',
        'query': 'query'
    }

    def __init__(self, query_scope=None, query_scope_id=None, query=None):  # noqa: E501
        """RawRequest - a model defined in Swagger"""  # noqa: E501

        self._query_scope = None
        self._query_scope_id = None
        self._query = None
        self.discriminator = None

        if query_scope is not None:
            self.query_scope = query_scope
        if query_scope_id is not None:
            self.query_scope_id = query_scope_id
        if query is not None:
            self.query = query

    @property
    def query_scope(self):
        """Gets the query_scope of this RawRequest.  # noqa: E501


        :return: The query_scope of this RawRequest.  # noqa: E501
        :rtype: str
        """
        return self._query_scope

    @query_scope.setter
    def query_scope(self, query_scope):
        """Sets the query_scope of this RawRequest.


        :param query_scope: The query_scope of this RawRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AccountId", "OrganizationId", "None"]  # noqa: E501
        if query_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `query_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(query_scope, allowed_values)
            )

        self._query_scope = query_scope

    @property
    def query_scope_id(self):
        """Gets the query_scope_id of this RawRequest.  # noqa: E501


        :return: The query_scope_id of this RawRequest.  # noqa: E501
        :rtype: str
        """
        return self._query_scope_id

    @query_scope_id.setter
    def query_scope_id(self, query_scope_id):
        """Sets the query_scope_id of this RawRequest.


        :param query_scope_id: The query_scope_id of this RawRequest.  # noqa: E501
        :type: str
        """

        self._query_scope_id = query_scope_id

    @property
    def query(self):
        """Gets the query of this RawRequest.  # noqa: E501


        :return: The query of this RawRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this RawRequest.


        :param query: The query of this RawRequest.  # noqa: E501
        :type: str
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RawRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RawRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
